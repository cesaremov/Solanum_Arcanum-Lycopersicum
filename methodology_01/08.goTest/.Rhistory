quit()
setwd("~/CNS/08.goTest/")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# library(goseq)
library(rtracklayer)
library(reshape2)
library(GO.db)
library(gplots)
library(RColorBrewer)
library(pbapply)
library(broom)
library(edgeR)
rm(list = ls())
gc()
# Paths
inPath <- "../07.edger/"
outPath <- "goTest"
dir.create(outPath, showWarnings = FALSE)
# Chunk 2
# Get GO terms from protein_go info
trinotateTab <- read.table("../00.AnnotateGenome/01.Trinotate/Trinotate.xls", sep = "\t",
header = TRUE, comment.char = "", stringsAsFactors = FALSE, quote = "")
row.names(trinotateTab) <- trinotateTab$X.gene_id
trinotateTab$description_BLASTX_hit <- gsub("^.+Full=|;\\^.+", "", trinotateTab$sprot_Top_BLASTX_hit)
trinotateTab$description_BLASTP_hit <- gsub("^.+Full=|;\\^.+", "", trinotateTab$sprot_Top_BLASTP_hit)
# Split by gene id
geneGOlist <- split(trinotateTab$gene_ontology_blast, f = trinotateTab$X.gene_id)
# Remove trx without ontology term
geneGOlist <- geneGOlist[trinotateTab$X.gene_id[trinotateTab$gene_ontology_blast != "."]]
# Filter out by pID
pid <- as.numeric(sapply(strsplit(trinotateTab$sprot_Top_BLASTX_hit, split = "\\^"), function(x) sub("\\%ID", "", x[4])))
names(pid) <- trinotateTab$X.gene_id
pid <- pid[!is.na(pid)]
minpid <- 70
pid <- pid[pid >= minpid]
geneGOlist <- geneGOlist[names(pid)]
# Filter out by Evalue
eval <- as.numeric(gsub(".+E:|\\^RecName.+", "", trinotateTab$sprot_Top_BLASTX_hit))
names(eval) <- trinotateTab$X.gene_id
eval <- eval[!is.na(eval)]
geneGOlist <- geneGOlist[names(eval)]
# Unlist
geneGOlist <- geneGOlist[!is.na(names(geneGOlist))]
geneGO <- unlist2(lapply(geneGOlist, function(x) sub("\\^.+", "", unlist(strsplit(x, "\\`")))))
# Set gene GO table
geneGOTab <- data.frame(GeneID = names(geneGO), GO = geneGO,  stringsAsFactors = FALSE)
# Get goList, trx splited by GO
goList <- split(geneGOTab$GeneID, f = geneGOTab$GO)
# Filter goList by length
goLen <- sapply(goList, length)
goLen <- goLen[goLen >= 20 & goLen <= 500 ]
goList <- goList[names(goLen)]
# goList <- goList[seq(20)]
print(length(goList))
hist(sapply(goList, length), 32)
# Chunk 3
# Get deTabs
contFiles <- list.files(path = inPath, pattern = "tab", full.names = TRUE, recursive = TRUE)
contFiles <- contFiles[!grepl("Lyc_vs_Arc", contFiles)]
# Set FDR
fdr <- 0.01
contList <- list()
deList <- list()
for (contFile in contFiles) {
print(contFile)
# Load de table
deTab <- read.table(contFile, sep = "\t", header = TRUE, comment.char = "", quote = "", stringsAsFactors = FALSE)
deTab$TrxID <- row.names(deTab)
deList[[sub(".tab", "", basename(contFile))]] <- deTab
# goList
goTestList <- pblapply(goList, function(x, deTab, geneGOTab) {
deTabX <- deTab
deTabX$statistics <- sign(deTabX$logFC) * -log10(deTabX$FDR)
deTabX$index <- (row.names(deTab) %in% x)
deTabX <- deTabX[intersect(row.names(deTabX), geneGOTab$GeneID),]
glmTab <- tidy(glm(index ~ statistics, data = deTabX, family = binomial(link = "logit"),
weights = ifelse(deTabX$index,
table(deTabX$index)["FALSE"]/table(deTabX$index)["FALSE"],
table(deTabX$index)["FALSE"]/table(deTabX$index)["TRUE"])))
glmResult <- glmTab[glmTab$term == "statistics", c("estimate", "p.value")]
return(glmResult)
}, deTab, geneGOTab, cl = 4)
# Get GO test table
goTestTab <- data.frame(GO = names(goList), do.call(rbind, goTestList), stringsAsFactors = FALSE)
goTestTab$Term <- Term(goTestTab$GO)
goTestTab$Ontology <- Ontology(goTestTab$GO)
goTestTab$nTrx <- sapply(goList[goTestTab$GO], length)
goTestTab <- goTestTab[order(goTestTab$p.value, decreasing = FALSE),]
x <- goList[["GO:0009735"]]
# x <- goList[[goTestTab[which.min(goTestTab$p.value), "GO"]]]
par(mfrow = c(1, 1), omi = c(0, 0, 0, 0))
barcodeplot(statistics = deTab$logFC, index = row.names(deTab) %in% x)
# Split by ontology
ontList <- split(goTestTab, f = goTestTab$Ontology)
# Set to contrast list
contList[[sub(".tab", "", basename(contFile))]] <- ontList
}
# Chunk 4
# Set contrast ontList
conts <- names(contList)
ontologies <- names(ontList)
# p.val correction method
padjMethod <- "fdr"
# TopN GO terms
topN <- 10
# Set max score
maxScore <- 10
# Results by Contrast and Ontology
ContOntList <- list()
goBigListTop <- list()
for (cont in conts) {
for (ontology in ontologies) {
# Set main
main <- paste0(cont, ", ", ontology)
print(main)
# Get ontology table
ontTab <- contList[[cont]][[ontology]]
# Correct p.values?
ontTab$fdr <- p.adjust(ontTab$p.value, padjMethod)
# Get scores (-log10(fdr))
ontTab$score <- -log10(ontTab$fdr) * sign(ontTab$estimate)
# Keep topN up/down scores
ontTab <- ontTab[order(ontTab$score),]
ontTabTopN <- rbind(head(ontTab, topN), tail(ontTab, topN))
ContOntList[[cont]][[ontology]] <- data.frame(cont = cont, ontTabTopN, stringsAsFactors = FALSE)
# Set max abs score
ontTabTopN$score <- ifelse(abs(ontTabTopN$score) >= maxScore,
ifelse(ontTabTopN$score > 0, maxScore, -maxScore),
ontTabTopN$score)
# Barplot, GO enrichment
par(omi = c(0, 4, 0, 0), mfrow = c(1, 1))
col <- c(pos = rgb(1, 0, 0, 0.75), neg = rgb(0, 0, 1, 0.75))
barplot(ontTabTopN$score, border = FALSE, names.arg = ontTabTopN$Term, horiz = TRUE, las = 1,
col = ifelse(ontTabTopN$score > 0, col["pos"], col["neg"]),
xlab = ("Enrichment score\n-log10(p.value)*sign(estimate)"),
main = paste0(main))
grid()
abline(v = c(-1, 1), lty = 2)
legend("right", legend = c("DE_up", "DE_down"), fill = c(col), bty = "n", box.col = "white")
}
# Get deTab to add functional annotation
deTab <- deList[[cont]]
deTab <- deTab[, c("ref_gene", "trx_id", "logFC", "FDR")]
deTab <- cbind(deTab, trinotateTab[row.names(deTab), c("description_BLASTX_hit", "description_BLASTP_hit", "Pfam", "eggnog", "Kegg")])
# Add enriched functions information
goListTop <- goList[do.call(rbind, ContOntList[[cont]])$GO]
for (goTop in names(goListTop)) {
deTab[, paste0(Ontology(goTop), "-", goTop, "_", gsub(",", "_", Term(goTop)))] <- row.names(deTab) %in% (goListTop[[goTop]])
}
write.table(deTab, file = paste0(outPath, "/", cont, "_goAnalysis.tab"), sep = "\t",
quote = FALSE, row.names = FALSE, col.names = TRUE)
write.table(deTab, file = paste0(outPath, "/", cont, "_goAnalysis.csv"), sep = ",",
quote = FALSE, row.names = FALSE, col.names = TRUE)
# Concat goListTop to goBigListTop
goBigListTop <- c(goBigListTop, goListTop)
}
# Chunk 5
# Get table to heatmap
ContOntTab <- do.call(rbind, lapply(ContOntList, function(x) do.call(rbind, lapply(x, function(x) x[, c("Ontology", "Term", "cont", "score")]))))
# Split by ontology
ContOntTabSplit <- split(ContOntTab, f = ContOntTab$Ontology)
ontMatList <- lapply(ContOntTabSplit, function(x) {
acast(data = x, formula = Term ~ cont, value.var = "score")
})
# Chunk 6
# Plot heatmap
for (ontology in names(ontMatList)) {
print(ontology)
# Get matrix x to work with
x <- ontMatList[[ontology]]
x[is.na(x)] <- 0
x[(x) < -maxScore] <- -maxScore
x[(x) > maxScore] <- maxScore
#
# dev.off()
par(omi = c(0.5, 0, 0, 1.5))
cols <- colorRampPalette(rev(brewer.pal(10, "Spectral")))(maxScore*4 + 1)
heatmap.2(as.matrix(x), scale = "none", col = cols,
trace = "none", cexCol = 0.75,
keysize = 1.25,
sepwidth = c(0.01, 0.01), colsep = seq(ncol(x)), rowsep = seq(nrow(x)),
main = ontology)
# image(t(x))
}
# Chunk 7
# Save objects
save(trinotateTab, deList, goBigListTop, goList, file = "goTest.Rdata") # deList, goBigListTop,
save(ontMatList, file = "00_ontMatList.Rdata")
# Chunk 8
sessionInfo()
